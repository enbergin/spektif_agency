generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// SQLite doesn't support enums, using String instead
// enum Role {
//   USER
//   ADMIN
// }

// enum Priority {
//   LOW
//   MEDIUM
//   HIGH
//   URGENT
// }

// enum NotificationType {
//   MENTION
//   COMMENT
//   ASSIGNMENT
//   DUE_DATE
//   BOARD_UPDATE
// }

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String?
  role      String   @default("USER")
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orgMembers       OrgMember[]
  createdBoards    Board[]        @relation("BoardCreator")
  boardMembers     BoardMember[]
  assignedCards    Card[]         @relation("CardAssignee")
  cardMembers      CardMember[]
  comments         Comment[]
  chatParticipants Participant[]
  sentMessages     Message[]
  notifications    Notification[]
  activities       Activity[]

  @@map("users")
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  avatar      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  members       OrgMember[]
  boards        Board[]
  conversations Conversation[]
  subscriptions Subscription[]
  invoices      Invoice[]

  @@map("organizations")
}

model OrgMember {
  id     String @id @default(cuid())
  userId String
  orgId  String
  role   String @default("USER")

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@unique([userId, orgId])
  @@map("org_members")
}

model Board {
  id             String   @id @default(cuid())
  title          String
  description    String?
  backgroundUrl  String?
  organizationId String
  createdBy      String
  position       Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  creator      User          @relation("BoardCreator", fields: [createdBy], references: [id])
  lists        List[]
  members      BoardMember[]
  activities   Activity[]

  @@map("boards")
}

model BoardMember {
  id      String @id @default(cuid())
  boardId String
  userId  String
  role    String @default("USER")

  board Board @relation(fields: [boardId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([boardId, userId])
  @@map("board_members")
}

model List {
  id        String   @id @default(cuid())
  title     String
  boardId   String
  position  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  board Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  cards Card[]

  @@map("lists")
}

model Card {
  id          String    @id @default(cuid())
  title       String
  description String?
  listId      String
  assignedTo  String?
  position    Int       @default(0)
  priority    String?   @default("MEDIUM")
  dueDate     DateTime?
  completed   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  list     List       @relation(fields: [listId], references: [id], onDelete: Cascade)
  assignee User?      @relation("CardAssignee", fields: [assignedTo], references: [id])
  labels   Label[]
  comments Comment[]
  members  CardMember[]
  activities Activity[]

  @@map("cards")
}

model CardMember {
  id     String @id @default(cuid())
  cardId String
  userId String

  card Card @relation(fields: [cardId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([cardId, userId])
  @@map("card_members")
}

model Label {
  id      String @id @default(cuid())
  name    String
  color   String
  boardId String

  cards Card[]

  @@map("labels")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  cardId    String
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  card   Card @relation(fields: [cardId], references: [id], onDelete: Cascade)
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Conversation {
  id             String   @id @default(cuid())
  name           String?
  type           String   @default("group")
  organizationId String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization?  @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  participants Participant[]
  messages     Message[]

  @@map("conversations")
}

model Participant {
  id             String @id @default(cuid())
  userId         String
  conversationId String
  role           String @default("member")

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@unique([userId, conversationId])
  @@map("participants")
}

model Message {
  id             String   @id @default(cuid())
  content        String
  conversationId String
  senderId       String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender       User         @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String
  type      String
  userId    String
  read      Boolean          @default(false)
  data      String?
  createdAt DateTime         @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Activity {
  id        String   @id @default(cuid())
  action    String
  entityId  String
  entityType String
  userId    String
  boardId   String?
  cardId    String?
  data      String?
  createdAt DateTime @default(now())

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  board Board? @relation(fields: [boardId], references: [id], onDelete: SetNull)
  card  Card?  @relation(fields: [cardId], references: [id], onDelete: SetNull)

  @@map("activities")
}

model Subscription {
  id             String   @id @default(cuid())
  organizationId String
  plan           String
  status         String
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  invoices     Invoice[]
  payments     Payment[]

  @@map("subscriptions")
}

model Invoice {
  id             String   @id @default(cuid())
  organizationId String
  subscriptionId String?
  amount         Int
  currency       String   @default("TRY")
  status         String
  dueDate        DateTime?
  paidAt         DateTime?
  createdAt      DateTime @default(now())

  organization Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  subscription Subscription? @relation(fields: [subscriptionId], references: [id], onDelete: SetNull)
  payments     Payment[]

  @@map("invoices")
}

model Payment {
  id             String   @id @default(cuid())
  invoiceId      String
  subscriptionId String?
  amount         Int
  currency       String   @default("TRY")
  method         String
  status         String
  transactionId  String?
  createdAt      DateTime @default(now())

  invoice      Invoice       @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  subscription Subscription? @relation(fields: [subscriptionId], references: [id], onDelete: SetNull)

  @@map("payments")
}